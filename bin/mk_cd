#!/bin/bash
bundle exec ruby $0 $@
exit 0

#!ruby
require 'optparse'
require 'find'

def mkdir(d)
  Dir.mkdir d
  Dir.new d
end

you = me = temp_dir = iso = nil
PUBLIC = File.absolute_path(File.join(Pathname.new(__FILE__).dirname.parent,'public'))

HELP = "See '#{__FILE__} --help' for usage."
OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [-s server] -p pixie [-o outfile] iso"

  opts.on("-s HOSTNAME", "--server=HOSTNAME", "--you=HOSTNAME", "Hostname of targeted installation server") do |s| you      = s; end
  opts.on("-p HOSTNAME", "--pixie=HOSTNAME", "--me=HOSTNAME", "Hostname of Pixie server")                   do |s| me       = s; end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!
iso = ARGV.shift or abort "Must specify input iso. #{HELP}"

require_relative '../lib/pixie'
require_relative '../lib/offline'

you or abort "Must specify targeted installation server with -p. #{HELP}"
File.exist?(iso) or abort "Input iso #{iso} not found"
iso =~ /^(.+)\.iso$/ or abort "Input iso #{iso} must have file extension .iso"
iso_basename = File.basename(iso,'.iso')
iso_basename2 = File.basename(iso)
outfile = File.join(Dir.getwd,"#{iso_basename}.#{you}.iso")

Dir.mktmpdir {|d|
  # setup
  tmp = Dir.new d
  mnt = mkdir File.join(tmp,'mnt')
  scratch = mkdir File.join(tmp,'scratch')
  system("mount -o loop #{iso} #{mnt.path}") or abort "Can't mount #{iso}"
  system("rsync -aH #{mnt.path}/ #{scratch.path}")
  system("umount #{mnt.path}")

  Dir.chdir(scratch.path) do    
    # move isolinux.cfg
    Dir.chdir('isolinux') do
      File.rename('isolinux.cfg','isolinux.cfg.orig')
    end

    # locate kernel and initrd
    kernel = initrd = nil
    cwd = Dir.getwd.to_s

    kernels = []
    initrds = []

    Find.find(cwd) do |path|
      if FileTest.directory?(path)
        unless(File.basename(path) =~ /^(isolinux|install)/ or cwd.eql?(path))
          Find.prune
        end
      elsif File.basename(path) =~ /^(vmlinuz)/
        kernels.push path
      elsif File.basename(path) =~ /^(initrd)/
        initrds.push path
      end
    end

    kernels.length == 1 or abort "Found #{kernels.length} kernels, expected 1. Either the iso or this script is broken."
    initrds.length == 1 or abort "Found #{initrds.length} initrds, expected 1. Either the iso or this script is broken."

    kernel = kernels[0].gsub(cwd,'')
    initrd = initrds[0].gsub(cwd,'')
    puts "DEBUG: kernel=#{kernel} initrd=#{initrd}"

    # write new isolinux.cfg
    TemplateEngine.new(File.join(PUBLIC,'isolinux.cfg.erb'),you,me,kernel: kernel, initrd: initrd).write('isolinux/isolinux.cfg')
    TemplateEngine.new(File.join(PUBLIC,'isopixie.txt.erb'),you,me,iso: iso_basename2).write('isolinux/isopixie.txt')
  end

  # generate iso
  Dir.chdir(tmp.path) do
    system "genisoimage -o #{outfile} -r -J -no-emul-boot -boot-load-size 4 -boot-info-table -b isolinux/isolinux.bin -c isolinux/boot.cat ./scratch"
  end
}

#te = TemplateEngine.new(ARGV[0],you,me)
#te.run

